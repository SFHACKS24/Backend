from flask import Flask, request
app= Flask(__name__)

#qnstypes: 0: binary, 1: scaled, 2: text, 3: weightage
qnsBank=[{"qns":"highweightage","type":0}, {"qns":"highweightage","type":1},{"qns":"firstQuestion","type":0},{"qns":"secondQuestion","type":1},{"qns":"thirdQuestion","type":2}]
numQns= len(qnsBank)
cookieBank={"cookie":0}
compatibilityThreshold=10

userStruct={
    "userId": 0,
    "responses":[{
        "qnsId": 0,
        "answer": "answer"
    },{
        "qnsId": 1,
        "answer": "answer"
    },{
        "qnsId": 2,
        "answer": "answer"
    }],
    "HighWeightage":[1,2],
    "LowWeightage":[0],
    "leadingPrompt":["prompt1","prompt2","prompt3"],
}
compatibilityStruct={
    {"userId":0,"qnsRanking":[0,1,2],"compatibilityScore":0.5},
    {"userId":1,"qnsRanking":[0,1,2],"compatibilityScore":1},
}

@app.route("/", methods=["GET"])
def hello_world():
    return "<p>Hello, World!</p>"

@app.route("/getQuestion", methods=["POST"])
def getQuestion():
    data= request.get_json() #change to cookies
    cookie= data["cookie"]
    qnsId=0
    if cookie in cookieBank:
        qnsId= cookieBank[cookie]
        cookieBank[cookie]= qnsId+1
    if qnsId>= numQns:
        return "No more questions" #process for leading prompts
    return qnsBank[qnsId]["qns"], qnsBank[qnsId]["type"]


#statuscodes: 0: success, 1: failure (answer too short), 2: found a higher threshold
@app.route("submitAnswer", methods=["POST"])
def submitAnswer():
    data= request.get_json()
    answer= data["answer"]
    qnsId= data["qnsId"]
    maxCompatibilityScore=0
    maxCompatibilityUserId=None
    if qnsId>= numQns: #these are the leading prompts
        return "No more questions"
    isLong, prompt= checkLength(qnsId,answer)
    if not isLong:
        return 1, prompt
    #if weightage qns
    if qnsId==0:
        userStruct["HighWeightage"]=answer
    elif qnsId==1:
        userStruct["LowWeightage"]=answer
    elif qnsId >= numQns: #leading prompts
        leadingPrompts= userStruct["leadingPrompt"]
        leadingPrompts.append(answer)
        while len(leadingPrompts)>3:
            leadingPrompts.pop(0)
        userStruct["leadingPrompt"]=leadingPrompts
   
    else: # update score
        #rank all other users ##TODO!!
        userRankings= getRankings(qnsId, answer)
        for idx, user in enumerate(userRankings):
            rank=idx+1
            compatibilityStruct[user]["qnsRanking"].append(rank)
            compatibilityScore= calculateScore(compatibilityStruct[user]["compatibilityScore"],qnsId,rank)
            compatibilityStruct[user]["compatibilityScore"]=compatibilityScore
            if compatibilityScore>compatibilityThreshold:
                maxCompatibilityUserId=user
            maxCompatibilityScore= max(maxCompatibilityScore,compatibilityScore)
        userStruct["responses"].append({"qnsId":qnsId,"answer":answer})
    #store answer

    if maxCompatibilityScore>compatibilityThreshold:
        return 2, maxCompatibilityUserId
    return 0, None

def checkLength(qnsId, answer):
    if len(answer)<10:
        return False, "Answer too short" #TODO generated by AI
    return True, None

def getRankings(qnsId, answer):
    return [0,1,2] #TODO rankings of all users

def calculateScore(currScore, qnsId, rank):
    priority=1
    if qnsId in userStruct["HighWeightage"]:
        priority=2
    elif qnsId in userStruct["LowWeightage"]:
        priority=0.5
    return currScore+ 1/(rank)*priority #TODO: adjust formula

def getRecommendations():
    return "Recommendations" #TODO

if __name__ == '__main__':  
   app.run()

